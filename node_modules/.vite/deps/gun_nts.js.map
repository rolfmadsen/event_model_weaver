{
  "version": 3,
  "sources": ["../../gun/nts.js"],
  "sourcesContent": [";(function(){\n  var Gun  = (typeof window !== \"undefined\")? window.Gun : require('./gun');\n  var dam  = 'nts';\n  var smooth = 2;\n\n  Gun.on('create', function(root){ // switch to DAM, deprecated old\n    Gun.log.once(\"nts\", \"gun/nts is removed deprecated old\");\n    this.to.next(root);\n  \treturn ; // stub out for now. TODO: IMPORTANT! re-add back in later.\n    var opt = root.opt, mesh = opt.mesh;\n    if(!mesh) return;\n\n    // Track connections\n    var connections = [];\n    root.on('hi', function(peer) {\n      this.to.next(peer);\n      connections.push({peer, latency: 0, offset: 0, next: 0});\n    });\n    root.on('bye', function(peer) {\n      this.to.next(peer);\n      var found = connections.find(connection => connection.peer.id == peer.id);\n      if (!found) return;\n      connections.splice(connections.indexOf(found), 1);\n    });\n\n    function response(msg, connection) {\n      var now            = Date.now(); // Lack of drift intentional, provides more accurate RTT\n      connection.latency = (now - msg.nts[0]) / 2;\n      connection.offset  = (msg.nts[1] + connection.latency) - (now + Gun.state.drift);\n      console.log(connection.offset);\n      Gun.state.drift   += connection.offset / (connections.length + smooth);\n      console.log(`Update time by local: ${connection.offset} / ${connections.length + smooth}`);\n    }\n\n    // Handle echo & setting based on known connection latency as well\n    mesh.hear[dam] = function(msg, peer) {\n      console.log('MSG', msg);\n      var now   = Date.now() + Gun.state.drift;\n      var connection = connections.find(connection => connection.peer.id == peer.id);\n      if (!connection) return;\n      if (msg.nts.length >= 2) return response(msg, connection);\n      mesh.say({dam, '@': msg['#'], nts: msg.nts.concat(now)}, peer);\n      connection.offset = msg.nts[0] + connection.latency - now;\n      Gun.state.drift  += connection.offset / (connections.length + smooth);\n      console.log(`Update time by remote: ${connection.offset} / ${connections.length + smooth}`);\n    };\n\n    // Handle ping transmission\n    setTimeout(function trigger() {\n      console.log('TRIGGER');\n      if (!connections.length) return setTimeout(trigger, 100);\n      var now = Date.now(); // Lack of drift intentional, provides more accurate RTT & NTP reference\n\n      // Send pings\n      connections.forEach(function(connection) {\n        if (connection.next > now) return;\n        mesh.say({\n          dam,\n          '#': String.random(3),\n          nts: [now],\n        });\n      });\n\n      // Plan next round of pings\n      connections.forEach(function(connection) {\n        if (connection.next > now) return;\n        // https://discord.com/channels/612645357850984470/612645357850984473/755334349699809300\n        var delay = Math.min(2e4, Math.max(250, 150000 / Math.abs((connection.offset)||1)));\n        connection.next = now + delay;\n      });\n\n      // Plan next trigger round\n      // May overshoot by runtime of this function\n      var nextRound = Infinity;\n      connections.forEach(function(connection) {\n        nextRound = Math.min(nextRound, connection.next);\n      });\n      setTimeout(trigger, nextRound - now);\n      console.log(`Next sync round in ${(nextRound - now) / 1000} seconds`);\n    }, 1);\n  });\n\n}());\n"],
  "mappings": "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",
  "names": ["connection"]
}
